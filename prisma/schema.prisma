generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

/// **User model**: Stores details of all users, including Admins, Students, and Teachers
model User {
    id String @id @default(cuid())

    firstName    String
    lastName     String
    email        String
    password     String
    profileImage String?
    gender       Genders
    role         UserRoles

    // **Relations**

    /// Courses enrolled by the student (Many-to-Many with Course)
    enrolledCourses Course[] @relation("StudentEnrolledCourses")

    /// Club courses enrolled by the student (Many-to-Many with ClubCourse)
    enrolledClubCourses ClubCourse[] @relation("StudentEnrolledClubCourses")

    /// Courses added to the cart (Many-to-Many with Course)
    cartCourses Course[] @relation("CartCourses")

    /// Courses created by the teacher (One-to-Many with Course)
    createdCourses Course[] @relation("TeacherCreatedCourses")

    isDeleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// **ClubCourse model**: Represents special bundled courses available in a club-like structure
model ClubCourse {
    id                    String  @id @default(cuid())
    clubCourseName        String
    clubCourseDescription String
    thumbnailImage        String?
    isPublished           Boolean @default(false)
    isFree                Boolean @default(false)

    // **Relations**

    /// Courses associated with this club course (Many-to-Many with Course)
    courses Course[] @relation("ClubCourseCourses")

    /// Users enrolled in this club course (Many-to-Many with User)
    enrolledUsers User[] @relation("StudentEnrolledClubCourses")

    /// Categories assigned to this club course (Many-to-Many with CourseCategories)
    categories CourseCategories[] @relation("ClubCourseCategories")

    isDeleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// **Course model**: Represents an individual course with lessons and categories
model Course {
    id                String  @id @default(cuid())
    courseName        String
    courseDescription String?
    courseScore       String
    thumbnailImage    String?
    isPublished       Boolean @default(false)
    isFree            Boolean @default(false)
    courseFees        Float   @default(0.00)

    // **Relations**

    /// Students enrolled in this course (Many-to-Many with User)
    enrolledUsers User[] @relation("StudentEnrolledCourses")

    /// Lessons associated with this course (One-to-Many with CourseLessons)
    lessons CourseLessons[] @relation("CourseLessons")

    /// Club courses this course belongs to (Many-to-Many with ClubCourse)
    clubCourses ClubCourse[] @relation("ClubCourseCourses")

    /// Categories assigned to this course (Many-to-Many with CourseCategories)
    categories CourseCategories[] @relation("CourseCategories")

    /// Users who have added this course to their cart (Many-to-Many with User)
    cartUsers User[] @relation("CartCourses")

    /// Teacher who created this course (One-to-Many with User)
    createdById String
    createdBy   User   @relation("TeacherCreatedCourses", fields: [createdById], references: [id])

    isDeleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// **CourseLessons model**: Represents lessons within a course
model CourseLessons {
    id             String  @id @default(cuid())
    lessonName     String
    sequenceNumber Int
    isPublished    Boolean @default(false)
    isFree         Boolean @default(false)

    // **Relations**

    /// Course to which this lesson belongs (Many-to-One with Course)
    courseId String?
    course   Course? @relation("CourseLessons", fields: [courseId], references: [id])

    /// Lesson contents (One-to-Many with LessonContents)
    lessonContents LessonContents[] @relation("LessonContents")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([courseId, sequenceNumber])
}

/// **LessonContents model**: Represents individual content items within a lesson
model LessonContents {
    id             String   @id @default(cuid())
    contentName    String
    contentType    Contents
    resourceLink   String
    sequenceNumber Int
    isCompleted    Boolean  @default(false)
    isFree         Boolean  @default(false)

    // **Relations**

    /// Lesson this content belongs to (Many-to-One with CourseLessons)
    courseLessonId String?
    lesson         CourseLessons? @relation("LessonContents", fields: [courseLessonId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([courseLessonId, sequenceNumber])
}

/// **CourseCategories model**: Represents categories that can be assigned to courses and club courses
model CourseCategories {
    id       String @id @default(cuid())
    category String @unique

    // **Relations**

    /// Courses under this category (Many-to-Many with Course)
    courses Course[] @relation("CourseCategories")

    /// Club courses under this category (Many-to-Many with ClubCourse)
    clubCourses ClubCourse[] @relation("ClubCourseCategories")

    isDeleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// **Enums**
enum UserRoles {
    Admin
    Student
    Teacher
}

enum Genders {
    Male
    Female
    Other
}

enum Contents {
    Video
    Audio
    PDF
}

enum CourseCategoriesEnum {
    All
    IT
    Frontend
    Backend
}
